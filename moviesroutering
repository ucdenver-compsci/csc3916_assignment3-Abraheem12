const express = require("express");
const router = express.Router();
const authController = require("./auth_jwt");
const MovieModel = require("./Movies");
const generateResponseObject = require("./getJSON");

router
  .route("/movies")
  .get(authController.isAuthenticated, async (req, res) => {
    let responseObj = generateResponseObject(req);
    const moviesList = await MovieModel.find({});
    const moviesData = moviesList.map(movie => ({
      title: movie.title,
      releaseDate: movie.releaseDate,
      genre: movie.genre,
      actors: movie.actors,
    }));
    responseObj.message = `GET movies ${moviesList}`;
    responseObj.status = res.statusCode;
    responseObj.movies = moviesData;
    responseObj.queryString = req.query ? req.query : "No query string";
    res.json([responseObj]);
  })

  .post(authController.isAuthenticated, async (req, res) => {
    let responseObj = generateResponseObject(req);
    if (
      req.body.title &&
      req.body.releaseDate &&
      req.body.genre &&
      req.body.actors.length >= 3
    ) {
      const newMovie = new MovieModel(req.body);
      try {
        await newMovie.save();
        responseObj.message = "Movie saved successfully";
        responseObj.status = res.statusCode;
        responseObj.queryString = req.query ? req.query : "No query string";
        res.json(responseObj);
      } catch (err) {
        res.status(500).json({
          message: "Could not save the movie due to a server error",
        });
      }
    } else {
      res.status(400).json({
        action: "Failed to save due to missing information",
        
      });
    }
  })
  .all((req, res) => {
    res.status(405).send("HTTP method not supported");
  });

router
  .route("/movies/:title")
  .delete(authController.isAuthenticated, async (req, res) => {
    if (req.params.title) {
      try {
        const deletionResult = await MovieModel.deleteOne({
          title: req.params.title,
        });
        let responseObj = generateResponseObject(req);
        responseObj.status = 200;
        responseObj.message = `Movie titled '${req.params.title}' was deleted successfully`;
        responseObj.queryString = req.query ? req.query : "No query string";
        res.status(200).json(responseObj);
      } catch (err) {
        res.status(500).json({
          message: "Failed to delete the movie due to a server error",
        });
      }
    } else {
      res.status(400).json({
        message: "Please specify the movie title in the URL to delete",
      });
    }
  })
  .put(authController.isAuthenticated, async (req, res) => {
    const movieToUpdate = await MovieModel.findOne({ title: req.params.title });
    if (!movieToUpdate) {
      return res.status(404).json({ message: "Movie not found" });
    }
    if (
      req.body.title &&
      req.body.releaseDate &&
      req.body.genre &&
      req.body.actors.length >= 3
    ) {
      try {
        let responseObj = generateResponseObject(req);
        const updatedMovie = await MovieModel.findOneAndUpdate(
          { title: req.params.title },
          req.body,
          { new: true }
        );
        responseObj.status = 200;
        responseObj.message = `Movie titled '${updatedMovie.title}' was updated successfully`;
        responseObj.queryString = req.query ? req.query : "No query string";
        res.status(200).json(responseObj);
      } catch (err) {
        res.status(500).json({
          message: "Failed to update the movie due to a server error",
        });
      }
    } else {
      res.status(400).json({
        action: "Failed to update due to missing information",
        message:
          "Ensure the movie details include title, releaseDate, genre, and at least 3 actors in JSON format",
      });
    }
  })
  .all((req, res) => {
    res.status(405).send("HTTP method not supported");
  });

module.exports = router;
